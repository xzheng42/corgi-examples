// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fitGPBAU
List fitGPBAU(const arma::colvec& y, const arma::mat& X, const List& prior, const List& starting, const List& tuning, const List& mod_param, const List& mcmc_settings);
RcppExport SEXP _spds_fitGPBAU(SEXP ySEXP, SEXP XSEXP, SEXP priorSEXP, SEXP startingSEXP, SEXP tuningSEXP, SEXP mod_paramSEXP, SEXP mcmc_settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const List& >::type starting(startingSEXP);
    Rcpp::traits::input_parameter< const List& >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const List& >::type mod_param(mod_paramSEXP);
    Rcpp::traits::input_parameter< const List& >::type mcmc_settings(mcmc_settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(fitGPBAU(y, X, prior, starting, tuning, mod_param, mcmc_settings));
    return rcpp_result_gen;
END_RCPP
}
// predGPBAU2
arma::mat predGPBAU2(const arma::colvec& y, const arma::mat& X, const List& post_sams, const List& mod_param, const int& nreport);
RcppExport SEXP _spds_predGPBAU2(SEXP ySEXP, SEXP XSEXP, SEXP post_samsSEXP, SEXP mod_paramSEXP, SEXP nreportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type post_sams(post_samsSEXP);
    Rcpp::traits::input_parameter< const List& >::type mod_param(mod_paramSEXP);
    Rcpp::traits::input_parameter< const int& >::type nreport(nreportSEXP);
    rcpp_result_gen = Rcpp::wrap(predGPBAU2(y, X, post_sams, mod_param, nreport));
    return rcpp_result_gen;
END_RCPP
}
// predGPBAU3
arma::mat predGPBAU3(const arma::colvec& y, const arma::mat& X, const List& post_sams, const List& mod_param, const int& nreport);
RcppExport SEXP _spds_predGPBAU3(SEXP ySEXP, SEXP XSEXP, SEXP post_samsSEXP, SEXP mod_paramSEXP, SEXP nreportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type post_sams(post_samsSEXP);
    Rcpp::traits::input_parameter< const List& >::type mod_param(mod_paramSEXP);
    Rcpp::traits::input_parameter< const int& >::type nreport(nreportSEXP);
    rcpp_result_gen = Rcpp::wrap(predGPBAU3(y, X, post_sams, mod_param, nreport));
    return rcpp_result_gen;
END_RCPP
}
// expCorr
arma::mat expCorr(const arma::mat& distmat, const double& phi);
RcppExport SEXP _spds_expCorr(SEXP distmatSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(expCorr(distmat, phi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spds_fitGPBAU", (DL_FUNC) &_spds_fitGPBAU, 7},
    {"_spds_predGPBAU2", (DL_FUNC) &_spds_predGPBAU2, 5},
    {"_spds_predGPBAU3", (DL_FUNC) &_spds_predGPBAU3, 5},
    {"_spds_expCorr", (DL_FUNC) &_spds_expCorr, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_spds(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
